pipeline{
	agent any
	stages 
	{
        stage('Build and Test') 
        {
            steps {
                bat 'mvn clean install' 
            }
        }
        stage('Analyse Code') { 
            steps {
              withSonarQubeEnv('MySonarQubeServer') {
                 bat 'mvn sonar:sonar -Dsonar.projectKey=Jenkin -Dsonar.host.url=http://B2ML30358:9002 -Dsonar.login=293c9647bd93b16811b11fe71bdb4ce1c3369a64'
              }
          }
        }
        stage('Quality Gate')
        {  
        	steps { 
        		script { 
              		timeout(time: 1, unit: 'HOURS') 
              		{
    					def qg = waitForQualityGate() 
    					if (qg.status != 'OK') 
    					{
        					error "Pipeline aborted due to quality gate failure: ${qg.status}"
        					mail bcc: '', body: 'Build Failed', cc: '', from: '', replyTo: '', subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!', to: 'vjvignesh4@gmail.com'	
    					}
  					}
  				}
  			}
      	}
      	stage('Upload to Artifactory')
      	{
      		steps{
      			script{
      				def server = Artifactory.server "art-1"
      				def buildInfo = Artifactory.newBuildInfo()
      				buildInfo.env.capture = true
      				buildInfo.env.collect()
      				def uploadSpec = """{
        				"files": [
          						{
            					"pattern": "**/target/*.jar",
            					"target": "maven-simple-0.2-SNAPSHOT"
          						}]
      					}"""
      				server.upload spec: uploadSpec, buildInfo: buildInfo
      				buildInfo.retention maxBuilds: 10, maxDays: 7, deleteBuildArtifacts: true
      				server.publishBuildInfo buildInfo
      			}
      		}
      	}
      	stage('SendReport')
      	{
      		steps {  
					mail bcc: '', body: 'Build Success', cc: '', from: '', replyTo: '', subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!', to: 'vjvignesh4@gmail.com'	
				}
		}
	}
}